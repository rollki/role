<?php

/**
 * @file
 * Contains role_registration.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\role_registration\Service\RoleRegistrationManagerInterface;

/**
 * Implements hook_entity_type_alter().
 */
function role_registration_entity_type_alter(array &$entity_types) {
  // Get all form display modes.
  $form_modes = Drupal::service('entity_display.repository')->getAllFormModes();
  foreach ($form_modes as $entity_type => $display_modes) {
    if ($entity_type !== 'user') {
      continue;
    }

    $user_type = $entity_types[$entity_type];
    foreach ($display_modes as $machine_name => $form_display) {
      $default_handler_class = $user_type->getHandlerClasses()['form']['default'];
      $user_type->setFormClass($machine_name, $default_handler_class);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function role_registration_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if role_id is set.
  if ($role_id = $form_state->getValue('role_id')) {
    $form['role_id'] = ['#type' => 'value', '#value' => $role_id];
    $form['#validate'][] = 'Drupal\role_registration\Service\RoleRegistrationManager::addRoleToUser';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function role_registration_form_user_role_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'role_registration_validate_alias';
  $form['actions']['submit']['#submit'][] = 'role_registration_update_alias';
}

/**
 * Validate alias handler.
 */
function role_registration_validate_alias(array &$form, FormStateInterface $form_state) {
  $registration_status = $form_state->getValue('account_registration_status');

  /** @var \Drupal\role_registration\Service\RoleRegistrationManagerInterface $registration_manager */
  $registration_manager = Drupal::service('role_registration.manager');

  $register_page_alias = $form_state->getValue('account_registration_alias');
  $register_page_alias = $registration_manager->cleanAlias($register_page_alias);

  // Do not validate alias if 'Enable registration by form mode' disabled
  // or alias field is empty.
  if (!$registration_status || empty($register_page_alias)) {
    return NULL;
  }

  if ($register_page_alias[0] !== '/') {
    $form_state->setErrorByName('account_registration_alias', 'The alias path has to start with a slash.');
  }

  // We need to check the alias.
  // Ignore check if this is form submitted for the first time.
  /** @var \Drupal\user\RoleInterface $role */
  $role = $form_state->getFormObject()->getEntity();
  $settings = $role->getThirdPartySettings(RoleRegistrationManagerInterface::MODULE_NAME);
  if (!empty($settings) && $settings['account_registration_alias'] != $register_page_alias) {
    // This is creation for new alis, we need to be sure its not exist.
    if ($registration_manager->isAliasExist($register_page_alias)) {
      // Here we set error that alias is exist.
      $form_state->setErrorByName('account_registration_alias', t('Alias already exists.'));
    }
  }
}

/**
 * Update alias handler.
 */
function role_registration_update_alias(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\role_registration\Service\RoleRegistrationManagerInterface $registration_manager */
  $registration_manager = Drupal::service('role_registration.manager');
  $base_url = RoleRegistrationManagerInterface::ROLE_REGISTRATION_BASE_REGISTER_PATH . '/' . $form_state->getValue('id');
  $registration_status = $form_state->getValue('account_registration_status');
  $alias = $form_state->getValue('account_registration_alias');
  $alias = $registration_manager->cleanAlias($alias);
  if ($registration_status && !empty($alias)) {
    $registration_manager->updateAlias($base_url, $alias);
  }
  else {
    $registration_manager->deleteAliasBySource($base_url);
  }
}
