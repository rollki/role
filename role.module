<?php

/**
 * @file
 * Role control.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\role\Form\ControlRoleForm;

/**
 * Implements hook_entity_type_alter().
 */
function role_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['user_role'])) {
    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $user_role */
    $user_role = &$entity_types['user_role'];
    $user_role->setFormClass('default',ControlRoleForm::class);
  }
}

/**
 * Implements hook_entity_form_display_alter().
 */
function role_entity_form_display_alter(EntityFormDisplayInterface &$form_display, array $context) {
  if ($context['entity_type'] === 'user' && $context['bundle'] === 'user') {
    /** @var Drupal\role\Service\RoleControlManagerInterface $control_manager */
    $control_manager = Drupal::service('role.control_manager');
    /** @var \Drupal\user\Entity\User $user */
    $user = Drupal::routeMatch()->getParameter('user');
    if (!$user) {
      return;
    }

    if ($context['form_mode'] === 'default') {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
      $storage = Drupal::service('entity_type.manager')
        ->getStorage('entity_form_display');

      if ($form_mode = $control_manager->getUserAccountFormMode($user)) {
        $form_display = $storage->load($context['entity_type'] . '.' . $context['bundle'] . '.' . $form_mode);
      }
    }
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function role_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($entity->bundle() === 'user') {
    /** @var Drupal\role\Service\RoleControlManagerInterface $control_manager */
    $control_manager = Drupal::service('role.control_manager');
    /** @var \Drupal\user\Entity\User $user */
    $user = Drupal::routeMatch()->getParameter('user');
    if (!$user) {
      return;
    }
    ($control_manager->getUserAccountViewMode($user) ? $view_mode = $control_manager->getUserAccountViewMode($user) : '');
  }
}

/**
 * Implements hook_form_alter().
 */
function role_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
    case 'user_form':
      $element = &NestedArray::getValue($form, ['account', 'roles']);
      // Make sure this module also works when role_delegation is enabled.
      if (isset($form['role_change'])) {
        $element = &NestedArray::getValue($form, ['role_change', 'widget']);
      }
      _single_role_edit_element($element, $form);
      break;

    case 'role_delegation_role_assign_form':
      _single_role_edit_element($form['account']['role_change'], $form);
      break;
  }
}

/**
 * Helper function that alters the role form element.
 *
 * @param $element
 *   The form element that should be altered.
 * @param $form
 *
 * @return null
 */
function _single_role_edit_element(&$element, &$form) {
  /** @var \Drupal\Core\Config\ImmutableConfig $single_role_settings */
  $single_role_settings = Drupal::config('single.role.settings');

  if (!$single_role_settings->get('state')) {
    return NULL;
  }

  $element['#type'] = $single_role_settings->get('field_type');
  $element['#multiple'] = FALSE;
  $element['#description'] = $single_role_settings->get('field_description');
  $element['#title'] = t('Role');
  $element[AccountInterface::AUTHENTICATED_ROLE]['#disabled'] = FALSE;

  // Set default role.
  foreach ($element['#default_value'] as $key => $value) {
    if ($key !== 0) {
      // Set first assigned role as default.
      $element['#default_value'] = $value;
      break;
    }
  }
}
